{"version":3,"sources":["api/api.tsx","entities/quotes/Quotes/fetchCompanies.tsx","entities/quotes/Quotes/model.tsx","entities/quotes/stores/index.ts","contexts.ts","components/MothlyCard/index.tsx","components/SerchCo/Test.tsx","components/Header/index.tsx","components/Footer/index.tsx","App.tsx","serviceWorker.ts","environments/production.tsx","index.tsx"],"names":["tokenIex","baseUrl","api","quotes","getQuote","name","axios","get","then","res","data","getQuoteA","symbol","getCompany","getMonthlyQuote","getPreviousDay","getPrice","crypto","getCryptoPrice","search","getSearch","fragment","fetchQuote","React","createContext","a","async","fetchMothlyQuote","fetchPreviousDay","QuoteStore","setQuoteStore","quoteStore","resetQuoteStore","setPreviousDayPrice","previousDayStore","setMonthlyPrice","monthlyData","monthlyPriceStore","this","latestPrice","open","observable","computed","storeContext","useStores","useContext","ApiContext","MontlyCard","DatePicker","MonthPicker","RangePicker","Input","TextArea","AutoComplete","Option","observer","useState","date","setDate","Object","keys","toJS","length","title","extra","format","onChange","value","time","disabledDate","current","dates","some","row","moment","_d","style","width","undefined","Test","loading","setLoading","titleAuto","setTitleAuto","type","justify","span","dataSource","dropdownClassName","onSearch","data1","bestMatches","options","map","elem","key","className","fetchCompany","allowClear","optionLabelProp","onSelect","e","console","log","size","placeholder","height","backgroundColor","animationIn","animationOut","animationInDuration","animationOutDuration","isVisible","companyName","borderRadius","theme","twoToneColor","fontSize","paddingLeft","primaryExchange","Title","Typography","Head","Foot","level","Header","Layout","Footer","Content","Sider","App","Boolean","window","location","hostname","match","Env","Main","component","Provider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d03467b0.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React from 'react';\r\n\r\nconst tokenIex = 'sk_23710eca08ee41f89b91b025174949ad';\r\nconst tokenAplha = 'JLPQJV6Z7V17CO06';\r\nconst baseUrl = 'https://cloud.iexapis.com/stable';\r\n\r\ninterface IQuoteResponse {\r\n  symbol?: string;\r\n  companyName?: string;\r\n  primaryExchange?: string;\r\n  calculationPrice?: string;\r\n  open?: number;\r\n  openTime?: null;\r\n  close?: null;\r\n  closeTime?: null;\r\n  high?: number;\r\n  low?: number;\r\n  latestPrice?: number;\r\n  latestSource?: string;\r\n  latestTime?: string;\r\n  latestUpdate?: number;\r\n  latestVolume?: null;\r\n  iexRealtimePrice?: number;\r\n  iexRealtimeSize?: number;\r\n  iexLastUpdated?: number;\r\n  delayedPrice?: null;\r\n  delayedPriceTime?: null;\r\n  extendedPrice?: null;\r\n  extendedChange?: null;\r\n  extendedChangePercent?: null;\r\n  extendedPriceTime?: null;\r\n  previousClose?: number;\r\n  previousVolume?: number;\r\n  change?: number;\r\n  changePercent?: number;\r\n  volume?: null;\r\n  iexMarketPercent?: number;\r\n  iexVolume?: number;\r\n  avgTotalVolume?: number;\r\n  iexBidPrice?: number;\r\n  iexBidSize?: number;\r\n  iexAskPrice?: number;\r\n  iexAskSize?: number;\r\n  marketCap?: number;\r\n  peRatio?: number;\r\n  week52High?: number;\r\n  week52Low?: number;\r\n  ytdChange?: number;\r\n  lastTradeTime?: number;\r\n  isUSMarketOpen?: boolean;\r\n}\r\n\r\ninterface IMonthlyResponse {\r\n  '1. open'?: string;\r\n  '2. high'?: string;\r\n  '3. low'?: string;\r\n  '4. close'?: string;\r\n  '5. volume'?: string;\r\n}\r\n\r\ninterface IPriceResponse {\r\n  number: number;\r\n}\r\n\r\nexport interface IPreviousDayResponse {\r\n  date?: string;\r\n  open?: number;\r\n  close?: number;\r\n  high?: number;\r\n  low?: number;\r\n  volume?: number;\r\n  uOpen?: number;\r\n  uClose?: number;\r\n  uHigh?: number;\r\n  uLow?: number;\r\n  uVolume?: number;\r\n  change?: number;\r\n  changePercent?: number;\r\n  changeOverTime?: number;\r\n  symbol?: string;\r\n}\r\n\r\nexport interface ISearchResponse {\r\n  symbol?: string;\r\n  name?: string;\r\n  type?: string;\r\n  region?: string;\r\n  marketOpen?: string;\r\n  marketClose?: string;\r\n  timezone?: string;\r\n  currency?: string;\r\n  matchScore?: string;\r\n  bestMatches?: string[];\r\n}\r\n\r\n// TODO выделить в отдельный файл\r\ntype TAPI = {\r\n  quotes: {\r\n    getQuote: (name: string) => Promise<IQuoteResponse>;\r\n    getQuoteA: any;\r\n    getCompany: any;\r\n    getMonthlyQuote: any;\r\n    getPreviousDay: (name: string) => Promise<IPreviousDayResponse>;\r\n    getPrice: (name: string) => Promise<IPriceResponse>;\r\n  };\r\n  crypto: {};\r\n  search: {\r\n    getSearch: (fragment: string) => Promise<ISearchResponse>;\r\n  };\r\n};\r\n\r\nconst api: TAPI = {\r\n  quotes: {\r\n    getQuote(name) {\r\n      return axios\r\n        .get(`${baseUrl}/stock/${name}/quote?token=${tokenIex}`)\r\n        .then(res => res.data);\r\n    },\r\n    getQuoteA(symbol: string) {\r\n      return axios\r\n        .get(\r\n          `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&${symbol}&interval=5min&outputsize=full&apikey=JLPQJV6Z7V17CO06`\r\n        )\r\n        .then(res => res.data);\r\n    },\r\n    getCompany(symbol: string) {\r\n      return axios\r\n        .get(\r\n          `https://cloud.iexapis.com/stable/stock/${symbol}/company?token=${tokenIex}`\r\n        )\r\n        .then(res => res.data);\r\n    },\r\n    getMonthlyQuote(symbol: string) {\r\n      return axios\r\n        .get(\r\n          `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${symbol}&outputsize=full&apikey=${tokenAplha}`\r\n        )\r\n        .then(res => res.data);\r\n    },\r\n    getPreviousDay(name: string) {\r\n      return axios\r\n        .get(`${baseUrl}/stock/${name}/previous?token=${tokenIex}`)\r\n        .then(res => res.data);\r\n    },\r\n    getPrice(name: string) {\r\n      return axios\r\n        .get(`${baseUrl}/stock/${name}/price?token=${tokenIex}`)\r\n        .then(res => res.data);\r\n    }\r\n  },\r\n  crypto: {\r\n    getCryptoPrice: (symbol: string) =>\r\n      axios\r\n        .get(\r\n          `https://cloud.iexapis.com/stable/crypto/${symbol}/price?token=${tokenIex}`\r\n        )\r\n        .then(res => res.data)\r\n  },\r\n  search: {\r\n    getSearch(fragment: string) {\r\n      return axios\r\n        .get(\r\n          `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${fragment}&apikey=${tokenAplha}`\r\n        )\r\n        .then(res => res.data);\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;\r\n\r\nexport const ApiContext = React.createContext(api);\r\n","import { ISearch, IQuote, IPreviousPrice } from '../Quotes/model';\r\nimport api from '../../../api/api';\r\n\r\nexport const fetchCo = (name: string): Promise<ISearch> => {\r\n  return api.search.getSearch(name);\r\n};\r\n\r\nexport const fetchQuote = async (name: string): Promise<IQuote> => {\r\n  return await api.quotes.getQuote(name);\r\n};\r\n\r\n//@ts-ignore\r\nexport const fetchMothlyQuote = async (name: string): Promise => {\r\n  return await api.quotes.getMonthlyQuote(name);\r\n};\r\n\r\nexport const fetchPreviousDay = async (\r\n  name: string\r\n): Promise<IPreviousPrice> => {\r\n  return await api.quotes.getPreviousDay(name);\r\n};\r\n\r\n//@ts-ignore\r\nexport const fetchPrice = async (name): Promise => {\r\n  return await api.quotes.getPrice(name);\r\n};\r\n","import { observable, computed, toJS } from 'mobx';\r\nimport {\r\n  fetchCo,\r\n  fetchQuote,\r\n  fetchPreviousDay,\r\n  fetchPrice,\r\n  fetchMothlyQuote\r\n} from './fetchCompanies';\r\n\r\nexport interface ISearch {\r\n  symbol?: string;\r\n  name?: string;\r\n  type?: string;\r\n  region?: string;\r\n  marketOpen?: string;\r\n  marketClose?: string;\r\n  timezone?: string;\r\n  currency?: string;\r\n  matchScore?: string;\r\n  bestMatches?: string[];\r\n}\r\n\r\nexport interface IQuote {\r\n  symbol?: string;\r\n  companyName?: string;\r\n  primaryExchange?: string;\r\n  calculationPrice?: string;\r\n  open?: number;\r\n  openTime?: null;\r\n  close?: null;\r\n  closeTime?: null;\r\n  high?: number;\r\n  low?: number;\r\n  latestPrice?: number;\r\n  latestSource?: string;\r\n  latestTime?: string;\r\n  latestUpdate?: number;\r\n  latestVolume?: null;\r\n  iexRealtimePrice?: number;\r\n  iexRealtimeSize?: number;\r\n  iexLastUpdated?: number;\r\n  delayedPrice?: null;\r\n  delayedPriceTime?: null;\r\n  extendedPrice?: null;\r\n  extendedChange?: null;\r\n  extendedChangePercent?: null;\r\n  extendedPriceTime?: null;\r\n  previousClose?: number;\r\n  previousVolume?: number;\r\n  change?: number;\r\n  changePercent?: number;\r\n  volume?: null;\r\n  iexMarketPercent?: number;\r\n  iexVolume?: number;\r\n  avgTotalVolume?: number;\r\n  iexBidPrice?: number;\r\n  iexBidSize?: number;\r\n  iexAskPrice?: number;\r\n  iexAskSize?: number;\r\n  marketCap?: number;\r\n  peRatio?: number;\r\n  week52High?: number;\r\n  week52Low?: number;\r\n  ytdChange?: number;\r\n  lastTradeTime?: number;\r\n  isUSMarketOpen?: boolean;\r\n}\r\n\r\nexport interface IPreviousPrice {\r\n  date?: string;\r\n  open?: number;\r\n  close?: number;\r\n  high?: number;\r\n  low?: number;\r\n  volume?: number;\r\n  uOpen?: number;\r\n  uClose?: number;\r\n  uHigh?: number;\r\n  uLow?: number;\r\n  uVolume?: number;\r\n  change?: number;\r\n  changePercent?: number;\r\n  changeOverTime?: number;\r\n  symbol?: string;\r\n}\r\n\r\nexport default class QuoteStore {\r\n  @observable quoteSearch: ISearch[] = [];\r\n  @observable quoteStore: IQuote = {};\r\n  @observable previousDayStore: IPreviousPrice = {};\r\n  @observable monthlyPriceStore = {};\r\n\r\n  setQuoteStore = async (data: string) => {\r\n    this.quoteStore = await fetchQuote(data);\r\n  };\r\n  resetQuoteStore = () => {\r\n    this.quoteStore = {};\r\n  };\r\n\r\n  setPreviousDayPrice = async (data: string) => {\r\n    this.previousDayStore = await fetchPreviousDay(data);\r\n  };\r\n\r\n  setMonthlyPrice = async (data: string) => {\r\n    const monthlyData = await fetchMothlyQuote(data);\r\n    this.monthlyPriceStore = monthlyData['Time Series (Daily)'];\r\n  };\r\n\r\n  @computed get getPreviousDay() {\r\n    if (this.quoteStore.latestPrice) {\r\n      //@ts-ignore\r\n      return this.previousDayStore.open > this.quoteStore.latestPrice\r\n        ? true\r\n        : false;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // getPrice = async (name: string) => {\r\n  //   this.previousDayStore = await fetchPrice(name);\r\n  // };\r\n}\r\n","import React from 'react';\r\n\r\nimport QuoteStore from '../Quotes/model';\r\n\r\nconst storeContext = React.createContext({\r\n  QuoteStore: new QuoteStore()\r\n});\r\n\r\nexport const useStores = () => React.useContext(storeContext);\r\n","import React from 'react';\r\n\r\n\r\n/** @TODO\r\nexport const ApiContext = React.createContext<TAPI | null>(null);\r\n */\r\nexport const ApiContext = React.createContext<any>(null);\r\n","import React, { useState } from 'react';\r\nimport { useStores } from '../../entities/quotes/stores';\r\nimport {\r\n  fetchCo,\r\n  fetchQuote\r\n} from '../../entities/quotes/Quotes/fetchCompanies';\r\nimport { Card, AutoComplete, Input, Row, Col, Icon } from 'antd';\r\nimport { ISearch } from '../../entities/quotes/Quotes/model';\r\nimport { toJS } from 'mobx';\r\nimport { Spin } from 'antd';\r\nimport { observer } from 'mobx-react';\r\nimport { Animated } from 'react-animated-css';\r\n\r\nimport './style.css';\r\nimport 'antd/dist/antd.css';\r\nimport { ApiContext } from '../../contexts';\r\nimport { DatePicker } from 'antd';\r\nimport moment from 'moment';\r\n\r\nconst { MonthPicker, RangePicker } = DatePicker;\r\n\r\nconst dateFormat = 'YYYY-MM-DD';\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = AutoComplete;\r\n\r\nconst MontlyCard: React.FC = observer(() => {\r\n  const { QuoteStore } = useStores();\r\n  const [date, setDate] = useState<string>();\r\n\r\n  const disabled = (current: any) => {\r\n    const dates = Object.keys(QuoteStore.monthlyPriceStore);\r\n    if (\r\n      current &&\r\n      dates.some(\r\n        row =>\r\n          moment(row).format('YYYY-MM-DD') ===\r\n          moment(current._d).format('YYYY-MM-DD')\r\n      )\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return current;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {Object.keys(toJS(QuoteStore.quoteStore)).length !== 0 ? (\r\n        <Card\r\n          title=\"Enter date you want\"\r\n          extra={\r\n            <DatePicker\r\n              format={dateFormat}\r\n              onChange={(value, time) => setDate(time)}\r\n              disabledDate={disabled}\r\n            ></DatePicker>\r\n          }\r\n          style={{ width: 500 }}\r\n        >\r\n          {date !== undefined && ['2. high'] !== undefined ? (\r\n            //@ts-ignore\r\n            <p>{QuoteStore.monthlyPriceStore[date]['2. high']}</p>\r\n          ) : null}\r\n        </Card>\r\n      ) : null}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MontlyCard;\r\n","import React, { useState, useContext } from 'react';\r\nimport { useStores } from '../../entities/quotes/stores';\r\nimport {\r\n  fetchCo,\r\n  fetchQuote\r\n} from '../../entities/quotes/Quotes/fetchCompanies';\r\nimport { Card, AutoComplete, Input, Row, Col, Icon } from 'antd';\r\nimport { ISearch } from '../../entities/quotes/Quotes/model';\r\nimport { toJS } from 'mobx';\r\nimport { Spin } from 'antd';\r\nimport { observer } from 'mobx-react';\r\nimport { Animated } from 'react-animated-css';\r\nimport './style.css';\r\nimport 'antd/dist/antd.css';\r\nimport { ApiContext } from '../../contexts';\r\nimport MontlyCard from '../MothlyCard/index';\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = AutoComplete;\r\n\r\nconst Test: React.FC = observer(() => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [titleAuto, setTitleAuto] = useState();\r\n  const { QuoteStore } = useStores();\r\n  const api = useContext(ApiContext);\r\n\r\n  const fetchCompany = async (name = '') => {\r\n    //@ts-ignore\r\n    const data: ISearch[] = await api.search.getSearch(name);\r\n    //@ts-ignore\r\n    const data1 = data.bestMatches;\r\n\r\n    if (data1 !== undefined) {\r\n      const options = data1.map((elem: any) => (\r\n        <Option key={elem['1. symbol']} value={elem['1. symbol']}>\r\n          <div className=\"global-search-item\">\r\n            <span className=\"global-search-item-desc\">{elem['1. symbol']}</span>\r\n            <span className=\"global-search-item-count\">{elem['2. name']}</span>\r\n          </div>\r\n        </Option>\r\n      ));\r\n      setTitleAuto(options);\r\n    }\r\n  };\r\n\r\n  const onSelect = async (value: any) => {\r\n    setLoading(true);\r\n    await QuoteStore.setQuoteStore(value);\r\n    await QuoteStore.setPreviousDayPrice(value);\r\n    await QuoteStore.setMonthlyPrice(value);\r\n    console.log(toJS(QuoteStore.previousDayStore));\r\n    setLoading(false);\r\n  };\r\n\r\n  const clearA = () => {\r\n    QuoteStore.resetQuoteStore();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row type=\"flex\" justify=\"center\">\r\n        <Col span={12}>\r\n          <AutoComplete\r\n            dataSource={titleAuto}\r\n            dropdownClassName=\"certain-category-search-dropdown\"\r\n            style={{ width: '100%' }}\r\n            onSearch={value => fetchCompany(value)}\r\n            allowClear={true}\r\n            optionLabelProp=\"value\"\r\n            onSelect={e => onSelect(e)}\r\n            onChange={e => clearA()}\r\n            size=\"large\"\r\n          >\r\n            <TextArea\r\n              placeholder=\"input here\"\r\n              className=\"customs\"\r\n              style={{ height: 80, backgroundColor: '#fff' }}\r\n            />\r\n          </AutoComplete>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row type=\"flex\" justify=\"center\">\r\n        <Col className=\"card\">\r\n          <Animated\r\n            animationIn=\"bounceInUp\"\r\n            animationOut=\"zoomOutDown\"\r\n            animationInDuration={1000}\r\n            animationOutDuration={1000}\r\n            isVisible={true}\r\n          >\r\n            <Card\r\n              //@ts-ignore\r\n              title={QuoteStore.quoteStore.companyName}\r\n              style={{ width: '300px', height: '100%', borderRadius: '10px' }}\r\n            >\r\n              {loading ? (\r\n                <Spin></Spin>\r\n              ) : (\r\n                <>\r\n                  <p>\r\n                    Latest Price: {QuoteStore.quoteStore.latestPrice}\r\n                    {Object.keys(toJS(QuoteStore.quoteStore)).length ===\r\n                    0 ? null : QuoteStore.getPreviousDay ? (\r\n                      <Animated\r\n                        animationIn=\"bounce\"\r\n                        animationOut=\"zoomOutDown\"\r\n                        animationInDuration={3000}\r\n                        animationOutDuration={3000}\r\n                        isVisible={true}\r\n                      >\r\n                        <Icon\r\n                          type=\"down-circle\"\r\n                          theme=\"twoTone\"\r\n                          twoToneColor=\"red\"\r\n                          style={{ fontSize: '20px', paddingLeft: '150px' }}\r\n                        />\r\n                      </Animated>\r\n                    ) : (\r\n                      <Animated\r\n                        animationIn=\"bounce\"\r\n                        animationOut=\"zoomOutDown\"\r\n                        animationInDuration={3000}\r\n                        animationOutDuration={3000}\r\n                        isVisible={true}\r\n                      >\r\n                        <Icon\r\n                          type=\"up-circle\"\r\n                          theme=\"twoTone\"\r\n                          twoToneColor=\"green\"\r\n                          style={{ fontSize: '20px', paddingLeft: '150px' }}\r\n                        />\r\n                      </Animated>\r\n                    )}\r\n                  </p>\r\n\r\n                  <p> Exchange: {QuoteStore.quoteStore.primaryExchange}</p>\r\n                </>\r\n              )}\r\n            </Card>\r\n            <MontlyCard />\r\n          </Animated>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Test;\r\n","import React from 'react';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function Head() {\r\n  return (\r\n    <div>\r\n      <Title type=\"danger\">Trading</Title>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Typography, Row } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function Foot() {\r\n  return (\r\n    <div>\r\n      <Row type=\"flex\" justify=\"end\">\r\n        <Title level={2} type=\"warning\">\r\n          Whatever♥\r\n        </Title>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport Test from './components/SerchCo/Test';\nimport Head from './components/Header/index';\nimport Foot from './components/Footer/index';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Layout } from 'antd';\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"main\">\n      <Layout>\n        <Header>\n          <Head />\n        </Header>\n        <Content className=\"content\">\n          <Test />\n        </Content>\n        <Footer className=\"footer\">\n          <Foot />\n        </Footer>\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\r\nimport { ApiContext } from '../contexts';\r\nimport api from '../api/api';\r\n\r\ntype TProps = {\r\n  component: React.ElementType;\r\n};\r\n\r\nconst Env: React.FC<TProps> = ({ component: Main }) => {\r\n  return (\r\n    <ApiContext.Provider value={api}>\r\n      <Main />\r\n    </ApiContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Env;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Production from './environments/production';\n\n/**\n <ApiContext.Provider value={api}><App /></ApiContext.Provider>\n*/\n\nReactDOM.render(\n  <Production component={App} />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}