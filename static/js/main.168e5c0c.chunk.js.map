{"version":3,"sources":["contexts.ts","service/Injection.ts","components/MothlyCard/index.tsx","components/PriceCard/index.tsx","components/SerchCo/Test.tsx","components/Header/index.tsx","components/Footer/index.tsx","App.tsx","serviceWorker.ts","api/browser.tsx","entities/quotes/Quotes/fetchCompanies.tsx","entities/quotes/Quotes/browser.tsx","environments/browser.tsx","timers/index.ts","index.tsx"],"names":["EnvironmentContext","React","createContext","useInjection","useContext","MontlyCard","DatePicker","MonthPicker","RangePicker","observer","QuoteStore","store","useState","date","setDate","Object","keys","toJS","quoteStore","length","title","extra","format","onChange","value","time","disabledDate","current","dates","monthlyPriceStore","some","row","moment","_d","placeholder","style","width","height","borderRadius","hoverable","undefined","Meta","Input","TextArea","AutoComplete","Option","Card","PriceCard","props","visible","setVisible","loading","animationIn","animationOut","animationInDuration","animationOutDuration","isVisible","companyName","description","primaryExchange","latestPrice","getPreviousDay","type","theme","twoToneColor","fontSize","paddingLeft","onClick","onOk","onCancel","Test","setLoading","titleAuto","setTitleAuto","api","justify","span","dataSource","dropdownClassName","onSearch","a","async","name","search","getSearch","data","data1","bestMatches","options","map","elem","key","className","fetchCompany","allowClear","optionLabelProp","onSelect","e","quotes","getQuote","then","res","setQuoteStore","setPreviousDayPrice","setMonthlyPrice","resetQuoteStore","size","backgroundColor","Title","Typography","Head","Foot","level","Header","Layout","Footer","Content","Sider","App","Boolean","window","location","hostname","match","tokenIex","baseUrl","axios","get","getQuoteA","symbol","getMonthlyQuote","getPrice","crypto","getCryptoPrice","fragment","fetchMothlyQuote","fetchPreviousDay","previousDayStore","monthlyData","this","open","observable","computed","env","setTimeout","cb","timeout","Env","Main","component","Provider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.168e5c0c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const EnvironmentContext = React.createContext<any>(null);\r\n","import { useContext } from 'react';\r\n\r\nimport { TENV } from '../interface';\r\nimport { EnvironmentContext } from '../contexts';\r\n\r\nexport const useInjection = (): TENV => {\r\n  return useContext<TENV>(EnvironmentContext);\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport { Card, AutoComplete, Input, Row, Col, Icon } from 'antd';\r\nimport { toJS } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Animated } from 'react-animated-css';\r\n\r\nimport './style.css';\r\nimport 'antd/dist/antd.css';\r\nimport { DatePicker } from 'antd';\r\nimport moment from 'moment';\r\nimport { useInjection } from '../../service/Injection';\r\n\r\nconst { MonthPicker, RangePicker } = DatePicker;\r\n\r\nconst dateFormat = 'YYYY-MM-DD';\r\n\r\nconst MontlyCard: React.FC = observer(() => {\r\n  const {\r\n    store: { QuoteStore }\r\n  } = useInjection();\r\n  const [date, setDate] = useState<string>();\r\n\r\n  const disabled = (current: any) => {\r\n    const dates = Object.keys(QuoteStore.monthlyPriceStore);\r\n    if (\r\n      current &&\r\n      dates.some(\r\n        row =>\r\n          moment(row).format('YYYY-MM-DD') ===\r\n          moment(current._d).format('YYYY-MM-DD')\r\n      )\r\n    ) {\r\n      return false;\r\n    } else {\r\n      return current;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {Object.keys(toJS(QuoteStore.quoteStore)).length !== 0 ? (\r\n        <Card\r\n          title=\"А сколько там раньше стоило?\"\r\n          extra={\r\n            <DatePicker\r\n              format={dateFormat}\r\n              onChange={(value, time) => setDate(time)}\r\n              disabledDate={disabled}\r\n              placeholder=\"Выбирай дату\"\r\n            ></DatePicker>\r\n          }\r\n          style={{ width: '500px', height: '100%', borderRadius: '10px' }}\r\n          hoverable\r\n        >\r\n          {date !== undefined && ['2. high'] !== undefined ? (\r\n            //@ts-ignore\r\n            <p>{QuoteStore.monthlyPriceStore[date]['2. high']}</p>\r\n          ) : null}\r\n        </Card>\r\n      ) : null}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MontlyCard;\r\n","import React, { useState, useContext } from 'react';\r\n\r\nimport { Card, AutoComplete, Input, Row, Col, Icon, Modal, Button } from 'antd';\r\nimport { toJS } from 'mobx';\r\nimport { Spin } from 'antd';\r\nimport { observer } from 'mobx-react';\r\nimport { Animated } from 'react-animated-css';\r\nimport './styles.css';\r\nimport 'antd/dist/antd.css';\r\nimport MontlyCard from '../MothlyCard/index';\r\nimport { useInjection } from '../../service/Injection';\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = AutoComplete;\r\n\r\nconst { Meta } = Card;\r\n\r\nconst PriceCard = observer(props => {\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n  const {\r\n    store: { QuoteStore }\r\n  } = useInjection();\r\n  const { loading } = props;\r\n\r\n  return (\r\n    <>\r\n      {Object.keys(toJS(QuoteStore.quoteStore)).length === 0 ? null : (\r\n        <Animated\r\n          animationIn=\"bounceInUp\"\r\n          animationOut=\"zoomOutDown\"\r\n          animationInDuration={1000}\r\n          animationOutDuration={1000}\r\n          isVisible={true}\r\n        >\r\n          <Card\r\n            //@ts-ignore\r\n            title={QuoteStore.quoteStore.companyName}\r\n            hoverable\r\n            style={{ width: '300px', height: '100%', borderRadius: '10px' }}\r\n          >\r\n            {' '}\r\n            <Meta description={QuoteStore.quoteStore.primaryExchange} />\r\n            {loading ? (\r\n              <Spin></Spin>\r\n            ) : (\r\n              <>\r\n                <p>\r\n                  Latest Price: {QuoteStore.quoteStore.latestPrice}\r\n                  {Object.keys(toJS(QuoteStore.quoteStore)).length ===\r\n                  0 ? null : QuoteStore.getPreviousDay ? (\r\n                    <Animated\r\n                      animationIn=\"bounce\"\r\n                      animationOut=\"zoomOutDown\"\r\n                      animationInDuration={3000}\r\n                      animationOutDuration={3000}\r\n                      isVisible={true}\r\n                    >\r\n                      <Icon\r\n                        type=\"down-circle\"\r\n                        theme=\"twoTone\"\r\n                        twoToneColor=\"red\"\r\n                        style={{ fontSize: '20px', paddingLeft: '150px' }}\r\n                      />\r\n                    </Animated>\r\n                  ) : (\r\n                    <Animated\r\n                      animationIn=\"bounce\"\r\n                      animationOut=\"zoomOutDown\"\r\n                      animationInDuration={3000}\r\n                      animationOutDuration={3000}\r\n                      isVisible={true}\r\n                    >\r\n                      <Icon\r\n                        type=\"up-circle\"\r\n                        theme=\"twoTone\"\r\n                        twoToneColor=\"green\"\r\n                        style={{ fontSize: '20px', paddingLeft: '150px' }}\r\n                      />\r\n                    </Animated>\r\n                  )}\r\n                </p>\r\n              </>\r\n            )}\r\n            <Button type=\"dashed\" onClick={() => setVisible(true)}>\r\n              Calendar prices\r\n            </Button>\r\n            <Modal\r\n              title=\"Check this out\"\r\n              visible={visible}\r\n              onOk={() => setVisible(false)}\r\n              onCancel={() => setVisible(false)}\r\n              width=\"600px\"\r\n            >\r\n              <MontlyCard />\r\n            </Modal>\r\n          </Card>\r\n        </Animated>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PriceCard;\r\n","import React, { useState } from 'react';\r\nimport { AutoComplete, Input, Row, Col } from 'antd';\r\nimport { ISearch } from '../../entities/quotes/Quotes/browser';\r\nimport { observer } from 'mobx-react';\r\nimport './style.css';\r\nimport 'antd/dist/antd.css';\r\nimport PriceCard from '../PriceCard/index';\r\nimport { useInjection } from '../../service/Injection';\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = AutoComplete;\r\n\r\nconst Test: React.FC = observer(() => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [titleAuto, setTitleAuto] = useState();\r\n  const {\r\n    api,\r\n    store: { QuoteStore }\r\n  } = useInjection();\r\n\r\n  const fetchCompany = async (name = '') => {\r\n    //@ts-ignore\r\n    const data: ISearch[] = await api.search.getSearch(name);\r\n    //@ts-ignore\r\n    const data1 = data.bestMatches;\r\n\r\n    if (data1 !== undefined) {\r\n      const options = data1.map((elem: any) => (\r\n        <Option key={elem['1. symbol']} value={elem['1. symbol']}>\r\n          <div className=\"global-search-item\">\r\n            <span className=\"global-search-item-desc\">{elem['1. symbol']}</span>\r\n            <span className=\"global-search-item-count\">{elem['2. name']}</span>\r\n          </div>\r\n        </Option>\r\n      ));\r\n      setTitleAuto(options);\r\n    }\r\n  };\r\n\r\n  const onSelect = async (value: any) => {\r\n    setLoading(true);\r\n    api.quotes.getQuote(value).then(res => QuoteStore.setQuoteStore(res));\r\n\r\n    await QuoteStore.setPreviousDayPrice(value);\r\n    await QuoteStore.setMonthlyPrice(value);\r\n    setLoading(false);\r\n  };\r\n\r\n  const clearA = () => {\r\n    QuoteStore.resetQuoteStore();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row type=\"flex\" justify=\"center\">\r\n        <Col span={12}>\r\n          <AutoComplete\r\n            dataSource={titleAuto}\r\n            dropdownClassName=\"certain-category-search-dropdown\"\r\n            style={{ width: '100%' }}\r\n            onSearch={value => fetchCompany(value)}\r\n            allowClear={true}\r\n            optionLabelProp=\"value\"\r\n            onSelect={e => onSelect(e)}\r\n            onChange={e => clearA()}\r\n            size=\"large\"\r\n          >\r\n            <TextArea\r\n              placeholder=\"input here\"\r\n              className=\"customs\"\r\n              style={{ height: 80, backgroundColor: '#fff' }}\r\n            />\r\n          </AutoComplete>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row type=\"flex\" justify=\"center\">\r\n        <Col className=\"card\">\r\n          <PriceCard loading={loading} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Test;\r\n","import React from 'react';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function Head() {\r\n  return (\r\n    <div>\r\n      <Title type=\"danger\">whatever</Title>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Typography, Row } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function Foot() {\r\n  return (\r\n    <div>\r\n      <Row type=\"flex\" justify=\"end\">\r\n        <Title level={2} type=\"warning\">\r\n          Whatever♥\r\n        </Title>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport Test from './components/SerchCo/Test';\nimport Head from './components/Header/index';\nimport Foot from './components/Footer/index';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Layout } from 'antd';\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"main\">\n      <Layout>\n        <Header>\n          <Head />\n        </Header>\n        <Content className=\"content\">\n          <Test />\n        </Content>\n        <Footer className=\"footer\">\n          <Foot />\n        </Footer>\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\r\nimport React from 'react';\r\nimport { TAPI } from './types';\r\n\r\nconst tokenIex = 'sk_23710eca08ee41f89b91b025174949ad';\r\nconst tokenAplha = 'JLPQJV6Z7V17CO06';\r\nconst baseUrl = 'https://cloud.iexapis.com/stable';\r\n\r\nconst api: TAPI = {\r\n  quotes: {\r\n    getQuote(name) {\r\n      return axios\r\n        .get(`${baseUrl}/stock/${name}/quote?token=${tokenIex}`)\r\n        .then(res => res.data);\r\n    },\r\n    getQuoteA(symbol: string) {\r\n      return axios\r\n        .get(\r\n          `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&${symbol}&interval=5min&outputsize=full&apikey=JLPQJV6Z7V17CO06`\r\n        )\r\n        .then(res => res.data);\r\n    },\r\n    getMonthlyQuote(symbol: string) {\r\n      return axios\r\n        .get(\r\n          `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${symbol}&outputsize=compact&apikey=${tokenAplha}`\r\n        )\r\n        .then(res => res.data);\r\n    },\r\n    getPreviousDay(name: string) {\r\n      return axios\r\n        .get(`${baseUrl}/stock/${name}/previous?token=${tokenIex}`)\r\n        .then(res => res.data);\r\n    },\r\n    getPrice(name: string) {\r\n      return axios\r\n        .get(`${baseUrl}/stock/${name}/price?token=${tokenIex}`)\r\n        .then(res => res.data);\r\n    }\r\n  },\r\n  crypto: {\r\n    getCryptoPrice: (symbol: string) =>\r\n      axios\r\n        .get(\r\n          `https://cloud.iexapis.com/stable/crypto/${symbol}/price?token=${tokenIex}`\r\n        )\r\n        .then(res => res.data)\r\n  },\r\n  search: {\r\n    getSearch(fragment: string) {\r\n      return axios\r\n        .get(\r\n          `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${fragment}&apikey=${tokenAplha}`\r\n        )\r\n        .then(res => res.data);\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;\r\n","import { IQuote, IPreviousPrice } from './browser';\r\nimport { ISearchResponse, IMonthlyResponse } from '../../../api/types';\r\nimport api from '../../../api/browser';\r\n\r\nexport const fetchCo = (name: string): Promise<ISearchResponse> => {\r\n  return api.search.getSearch(name);\r\n};\r\n\r\nexport const fetchQuote = async (name: string): Promise<IQuote> => {\r\n  return await api.quotes.getQuote(name);\r\n};\r\n\r\n//@ts-ignore\r\nexport const fetchMothlyQuote = async (name: string): Promise => {\r\n  return await api.quotes.getMonthlyQuote(name);\r\n};\r\n\r\nexport const fetchPreviousDay = async (\r\n  name: string\r\n): Promise<IPreviousPrice> => {\r\n  return await api.quotes.getPreviousDay(name);\r\n};\r\n","import { observable, computed, toJS } from 'mobx';\r\nimport {\r\n  fetchCo,\r\n  fetchQuote,\r\n  fetchPreviousDay,\r\n  fetchMothlyQuote\r\n} from './fetchCompanies';\r\n\r\nexport interface ISearch {\r\n  symbol?: string;\r\n  name?: string;\r\n  type?: string;\r\n  region?: string;\r\n  marketOpen?: string;\r\n  marketClose?: string;\r\n  timezone?: string;\r\n  currency?: string;\r\n  matchScore?: string;\r\n  bestMatches?: string[];\r\n}\r\n\r\nexport interface IQuote {\r\n  symbol?: string;\r\n  companyName?: string;\r\n  primaryExchange?: string;\r\n  calculationPrice?: string;\r\n  open?: number;\r\n  openTime?: null;\r\n  close?: null;\r\n  closeTime?: null;\r\n  high?: number;\r\n  low?: number;\r\n  latestPrice?: number;\r\n  latestSource?: string;\r\n  latestTime?: string;\r\n  latestUpdate?: number;\r\n  latestVolume?: null;\r\n  iexRealtimePrice?: number;\r\n  iexRealtimeSize?: number;\r\n  iexLastUpdated?: number;\r\n  delayedPrice?: null;\r\n  delayedPriceTime?: null;\r\n  extendedPrice?: null;\r\n  extendedChange?: null;\r\n  extendedChangePercent?: null;\r\n  extendedPriceTime?: null;\r\n  previousClose?: number;\r\n  previousVolume?: number;\r\n  change?: number;\r\n  changePercent?: number;\r\n  volume?: null;\r\n  iexMarketPercent?: number;\r\n  iexVolume?: number;\r\n  avgTotalVolume?: number;\r\n  iexBidPrice?: number;\r\n  iexBidSize?: number;\r\n  iexAskPrice?: number;\r\n  iexAskSize?: number;\r\n  marketCap?: number;\r\n  peRatio?: number;\r\n  week52High?: number;\r\n  week52Low?: number;\r\n  ytdChange?: number;\r\n  lastTradeTime?: number;\r\n  isUSMarketOpen?: boolean;\r\n}\r\n\r\nexport interface IPreviousPrice {\r\n  date?: string;\r\n  open?: number;\r\n  close?: number;\r\n  high?: number;\r\n  low?: number;\r\n  volume?: number;\r\n  uOpen?: number;\r\n  uClose?: number;\r\n  uHigh?: number;\r\n  uLow?: number;\r\n  uVolume?: number;\r\n  change?: number;\r\n  changePercent?: number;\r\n  changeOverTime?: number;\r\n  symbol?: string;\r\n}\r\n\r\nexport default class QuoteStore {\r\n  @observable quoteSearch: ISearch[] = [];\r\n  @observable quoteStore: IQuote = {};\r\n  @observable previousDayStore: IPreviousPrice = {};\r\n  @observable monthlyPriceStore = {};\r\n\r\n  setQuoteStore = async (data: IQuote) => (this.quoteStore = data);\r\n  //** Очищается стор и карточка пропадает */\r\n  resetQuoteStore = () => {\r\n    this.quoteStore = {};\r\n  };\r\n\r\n  //** Запрос данных о предыдущем дне торгов */\r\n  setPreviousDayPrice = async (data: string) => {\r\n    this.previousDayStore = await fetchPreviousDay(data);\r\n  };\r\n\r\n  //** Запрос данных примерно за полгода торгов, используется для календаря  */\r\n  setMonthlyPrice = async (data: string) => {\r\n    const monthlyData = await fetchMothlyQuote(data);\r\n    this.monthlyPriceStore = monthlyData['Time Series (Daily)'];\r\n  };\r\n\r\n  //** Сравнение текущей цены с предыдущим днём  */\r\n  @computed get getPreviousDay() {\r\n    if (this.quoteStore.latestPrice) {\r\n      //@ts-ignore\r\n      return this.previousDayStore.open > this.quoteStore.latestPrice\r\n        ? true\r\n        : false;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { EnvironmentContext } from '../contexts';\r\nimport api from '../api/browser';\r\nimport QuoteStore from '../entities/quotes/Quotes/browser';\r\nimport { setTimeout } from '../timers';\r\nimport { TENV } from '../interface';\r\n\r\ntype TProps = {\r\n  component: React.ElementType;\r\n};\r\n\r\nconst env: TENV = {\r\n  api,\r\n  setTimeout,\r\n  store: {\r\n    QuoteStore: new QuoteStore()\r\n  }\r\n};\r\n\r\nconst Env: React.FC<TProps> = ({ component: Main }) => {\r\n  return (\r\n    <EnvironmentContext.Provider value={env}>\r\n      <Main />\r\n    </EnvironmentContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Env;\r\n","import { TSetTimeout } from './types';\r\n\r\nexport const setTimeout: TSetTimeout = (cb, timeout) => {\r\n  setTimeout(cb, timeout);\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Browser from './environments/browser';\n\n/**\n <ApiContext.Provider value={api}><App /></ApiContext.Provider>\n*/\n\nReactDOM.render(<Browser component={App} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}